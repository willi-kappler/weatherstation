'W/O:  CCSG002220
'Customer:  Universitaet Tuebingen
'Date:  21st December 2015
'Program author:  P.Goodall
'Campbell Scientific Contact:  Kai Schoenfeld
'
'Program used to test your weather station.
'Please note the following important information:
'Use the test program as a starting point, you will need to adapt it to suit your own application.
'
'Please note : Unable to test Iridium modem set fully as no SIM card available
'
'-Wiring For CR1000-
'
'  HC2S3 (panel switched power)
'    1H:  Brown
'    1L:  White
'    AG:  Yellow
'    G:  Grey
'    G:  Clear
'    SW-12:  Green
'
'  CS300 Pyranometer
'    AG:  Black
'    2H:  Red
'    G:  Clear
'
'  CS655 Water Content Reflectometer (VWC, EC, T, P, PA, AND VR)
'    G:  Black
'    G:  Clear
'    G:  Orange
'    12V:  Red
'    C1:  Green
'
'  WindSonic4 (SDI-12) Two Dimensional Ultrasonic Wind Sensor
'    G:  Clear
'    G:  Black
'    12V:  Red
'    C3:  Green
'
'  ARG100 Rain Gauge (CSL)
'    AG:  Clear
'    P1:  Black
'
'  CS100 Barometric Pressure Sensor
'    2L:  Blue
'    AG:  Yellow
'    G:  Clear
'    G:  Black
'    12V:  Red
'    C2:  Green
'
'  9522B Iridium Satellite Modem and COM9522B Interface Modem
'    G:  Black
'    12V:  Red
'    C5:  Yellow
'
StationName ("SantaGracia")

Const NumberDataTables=2
'Variables for Iridium Configuration

'Require a variable for when a new DataTable file for transmission is created
Public NewTableFile(NumberDataTables) As Boolean
Public SendSbdMessage(NumberDataTables) As Boolean
'Require strings for the unique file names associated with the data table files
Public TableFileName(NumberDataTables) As String * 40
'Public FileLen(NumberDataTables) As Long ' KU: outcommented because not used (created warning)
Public HeadLen(NumberDataTables) As Long

'Message Sending Status Variables
Public CIERres As String * 32
Public SBDIres As String * 64
Public CIERstat(2) As Long
Public SBDIstat(5) As Long
Public SendTime As Long

Public SendFiles As Boolean
Public FileHandle As Long
Public ReadLength, SetupLength ',SendFileCntr As Long ' KU: outcommented because not used (created warning)
'Public LineCntr As Long ' KU: outcommented because not used (created warning)
Const ReadMax = 1024
'Public SendTotal, MaxSend As Long ' KU: outcommented because not used (created warning)
Public ReadString As String * ReadMax +5
Public SetupString As String * 64
 
Dim TX_Checksum As Long
Dim byteholder As Long
Dim icnt As Long

'used to send complete data definition information
'Normally sent once after the program starts
Public DataDefinitionFlag(NumberDataTables) As Boolean

Dim DataTableCount As Long
Public HeadCntr, cntr2 As Long
'Public TsinceRain  As Long = 100 ' KU: outcommented because not used (created warning)
'Public CS655cntr As Long ' KU: outcommented because not used (created warning)

'Declare Variables and Units
Public BattV
Public PTemp_C
Units BattV=Volts
Units PTemp_C=Deg C

'Define Data Tables
DataTable(Send3Hourly,True,-1)
  DataInterval(0,5,min,10)
  TableFile ("USR:Send3Hourly",1,0,2,0,0,NewTableFile(1),TableFileName(1))
  Average(1,BattV,FP2,0)
  Average (1,PTemp_C,FP2,0)
EndTable

DataTable(SendDaily,True,-1)
  DataInterval(0,1440,min,10)
  TableFile ("USR:SendDaily",1,0,1,0,0,NewTableFile(2),TableFileName(2))
  Minimum(1,BattV,FP2,False,False)
EndTable

DataTable(SaveFull,True,-1)
  DataInterval(0,30,min,10)
  Average(1,BattV,FP2,False)
  Average(1,PTemp_C,FP2,False)
EndTable

DataTable(SendStat, True, -1)
  Sample(1, ReadLength, FP2)
  Sample(1, CIERres, String)
  Sample(2, CIERstat(), Long)
  Sample(1, SBDIres, String)
  Sample(5, SBDIstat(), Long)
  Sample(1, SendTime, FP2)
EndTable

'Define Subroutines
Sub IridiumTx
  Timer(1,sec,2)
  SerialOpen(ComRS232,19200,0,0,2000)
  'Request Result of Signal Status
  SerialOut(ComRS232,"AT+CIER=1,0,1"+CHR(13),13,1,10)
  'Get and process Signal Status
  SerialIn(CIERres,ComRS232,6000,13,32)
  SplitStr (CIERstat(),CIERres,"",2,0)
  
  'Create SetupString
  SetupLength = Sprintf(SetupString,"AT+SBDWB=%d%c",ReadLength,13)

  'Calculate Checksum
    If ReadLength > 0 Then
      'Calculate the Checksum
      TX_Checksum = 0
      For icnt=1 To ReadLength Step 1
        byteholder=0
        MoveBytes (byteholder,3,ReadString(1,1,icnt),0,1)
        'The checksum is the sum of all bytes
        TX_Checksum = TX_Checksum + byteholder
      Next icnt
 
      'Move the checksum to the end of the outgoing data array
      MoveBytes (ReadString(1,1,ReadLength),1,TX_Checksum,2,2)
      EndIf

  'Send Message to Modem (into MO Buffer)
  SerialOut(ComRS232,Left(SetupString,SetupLength),"READY",1,100)'Waitstring im anderen Prog "0" ev. keine Antwort "Ready"?
  SerialOutBlock (ComRS232,ReadString(1,1,1),ReadLength + 2)'ohne spez AT Befehl in den Buffer? Im anderen Prog "ATS + BDWT" 
  SerialOut (COMRS232,"a","",0,100)
  
  'Send Message
  SerialOut(ComRS232,"AT+SBDI"+CHR(13),"", 1,10)
  'Check successful send
  SerialIn(SBDIres,ComRS232,10000,13,64)
  SplitStr (SBDIstat(),SBDIres,"",5,0))
  'Clear MO message buffer only needed when sending multiple messages in a row 
  SerialOut(ComRS232,"AT+SBDD0"+CHR(13),"0",1,100)
  SerialClose(ComRS232)
  SendTime = Timer(1,sec,1)
EndSub

'Main Program
BeginProg
  'A USR Drive is required for the COM9602 subroutine to store some temporary files.
  SetStatus ("USRDriveSize",32768)
  DataDefinitionFlag() = True
  
  'Main Scan
  Scan(1,min,10,0)
    
    'Default Datalogger Battery Voltage measurement 'BattV'
    Battery(BattV)
    'Default Wiring Panel Temperature measurement 'PTemp_C'
    PanelTemp(PTemp_C,_50Hz)

    'Call Data Tables and Store Data
    CallTable Send3Hourly
    CallTable SendDaily
    CallTable SaveFull
    
    For DataTableCount=1 To NumberDataTables Step 1
       If NewTableFile(DataTableCount)=True Then
          SendSbdMessage(DataTableCount)=True
          NewTableFile(DataTableCount)=False
       EndIf
    Next DataTableCount   

    'Activate Iridium Modems at 12:00 Daily for 15 minutes each time.
    'Allow modem warm-up time & check settings (5 minutes) & data transmissions (10 minutes)
    ' *** Use intervals that are applicable for your application ***

    If TimeIntoInterval (43,60,Min) Then PortSet (4,1)    ' Turn modem on every hour    
    If TimeIntoInterval (59,60,Min) Then 
      PortSet (4,0)    ' Turn off modem at 14:50 every 24 hours
      SendFiles = False
    EndIf
    
    'Allow the modem 3 minutes for warm up before sending files
    If TimeIntoInterval (46,60,min) Then 
      SendFiles = True 
      SendTotal = 0
    EndIf
    
    If (SendFiles=True) Then
      'If a new data output exists, call a subroutine to prepare the data and tansmit it.
      For cntr2=1 To NumberDataTables Step 1
      If SendSbdMessage(cntr2) Then
        
        If (HeadLen(cntr2) < 0) Then
          'Get File Size
          'FileHandle = FileOpen(TableFileName(cntr2),"rb",0)
          'FileSizes(cntr2) = FileSize (FileHandle)
          'FileClose(FileHandle)
          
          'Binary File has 5 Header Lines
          FileHandle = FileOpen(TableFileName(cntr2),"rb",0)
          HeadLen(cntr2) = 0
          For HeadCntr=1 To 5 Step 1
            ReadLength =  FileReadLine(FileHandle,ReadString,ReadMax)
            HeadLen(cntr2) += ReadLength
          Next HeadCntr
          HeadLen(cntr2) += 1
          FileClose(FileHandle)
         'CallTable ReadStat
        EndIf
        
        If DataDefinitionFlag(cntr2) Then
          'Write only Header
          FileHandle = FileOpen(TableFileName(cntr2),"rb",0)
          'Might need this instead if sent header is too long
          'ReadLength = FileRead (FileHandle,ReadString,HeadLen(cntr2)-1)
          ReadLength = FileRead (FileHandle,ReadString,HeadLen(cntr2))
          FileClose(FileHandle)
          Call (IridiumTx)
          CallTable SendStat
          
          'Only Send Header on Startup
          DataDefinitionFlag(cntr2) = False
          ExitFor
        EndIf
        
        FileHandle = FileOpen(TableFileName(cntr2),"rb",HeadLen(cntr2))
        ReadLength = ReadMax
        While ReadLength >= ReadMax
          ReadLength = FileRead(FileHandle,ReadString,ReadMax)
          Call (IridiumTx)
          CallTable SendStat
        Wend
        FileClose(FileHandle)

        'SendSbdMessage(cntr2) = False
       ' If (SendSbdMessage(1) = False AND SendSbdMessage(2) = False) Then
        '  SendFiles = False
        '  PortSet (4,0)
        'EndIf
        
        ExitFor
      EndIf
    Next cntr2
    EndIf
    
  NextScan
    
EndProg
