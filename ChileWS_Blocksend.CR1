'+W/O:  CCSG002220
'-Wiring For CR1000-
'
'  HC2S3 (panel switched power)
'    1H:  Brown
'    1L:  White
'    AG:  Yellow
'    G:  Grey
'    G:  Clear
'    SW-12:  Green
'
'  CS300 Pyranometer
'    AG:  Black
'    2H:  Red
'    G:  Clear
'
'  CS655 Water Content Reflectometer (VWC, EC, T, P, PA, AND VR)
'    G:  Black
'    G:  Clear
'    G:  Orange
'    12V:  Red
'    C1:  Green
'
'  WindSonic4 (SDI-12) Two Dimensional Ultrasonic Wind Sensor
'    G:  Clear
'    G:  Black
'    12V:  Red
'    C3:  Green
'
'  ARG100 Rain Gauge (CSL)
'    AG:  Clear
'    P1:  Black
'
'  CS100 Barometric Pressure Sensor
'    2L:  Blue
'    AG:  Yellow
'    G:  Clear
'    G:  Black
'    12V:  Red
'    C2:  Green
'
'  9522B Iridium Satellite Modem and COM9522B Interface Modem
'    G:  Black
'    12V:  Red
'    C5:  Yellow
'
StationName ("WanneTUE")

Const MaxNumberOfRecords = 100000

Const NumberDataTables = 2

'Maximum according to IRDM_IridiumSBDService_V3_DEVGUIDE_9Mar2012.pdf
'Page 11: "9522B: 1960 Bytes"
Const ReadMax = 1960

'1440 = 24 hours a day * 60 minutes per hour
Const MinutesPerHour = 60
Const MinutesPerDay = 24 * MinutesPerHour


'5 means TOB1, binary file without header but with time stamp
'See Datalogger_cr1000.pdf, Page 378
Const TableFormatOption = 5

'0 means overwrite the same file each time
Const TableMaxFiles = 0

'Write data table to CF card every day at 12:10h
'Thus we have at least one data record (at 12:00h) that will be send at 12:20h
Const HourTableWrite = 12
Const MinuteTableWrite = 10
Const TimeToWriteTable = (HourTableWrite * MinutesPerHour) + MinuteTableWrite


'Time values (hour and minute) for modem on / off state

'Turn on modem at 12:20 every 24 hours
Const HourModemOn = 12
Const MinuteModemOn = 20
Const TimeModemOn = (HourModemOn * 60) + MinuteModemOn

'Keep modem avtive for 50 minutes
Const ModemActiveDuration = 50

'Turn off modem at 13:10 every 24 hours
Const TimeModemOff = TimeModemOn + ModemActiveDuration

'Number of days to store data of failed transmission
Const MaxNumberOfFailures = 3

'Require strings for the unique file names associated with the data table files
Dim TableFileName(NumberDataTables) As String * 40

'Message Sending Status Variables
Public SerialResponse1 As String * 64
Public SerialResponse2 As String * 64
Public SerialResponse3 As String * 64
Public SerialResponse4 As String * 64
Public SerialResponse5 As String * 64

Dim SendFiles As Boolean
Dim FileHandle, TxDataLength, NumOfTxErrors, i As Long
Dim TxMeasureData As String * ReadMax
Public ErrorCode(6) As Long

'Save the data if an error occured. Send this data on the next day.
'Store the last three failures
Dim SavedData(MaxNumberOfFailures) As String * ReadMax
Dim SavedLength(MaxNumberOfFailures) As Long

Dim tableIndex As Long
Dim TsinceRain  As Long = 100
Dim CS655cntr As Long

'Declare Variables and Units
Public BattV
Public PTemp_C
Public AirTC
Public RH
Public PVap
Public SlrW
Public SlrMJ
Public CS655(6)
Public WSData(3)
Public N(8)
Public Rain_mm
'Public R_I_Hr
'Public R_I_C
Public BP_mbar

Alias CS655(1) = VWC
Alias CS655(2) = EC
Alias CS655(3) = GrTemp
Alias CS655(4) = P
Alias CS655(5) = PA
Alias CS655(6) = VR
Alias WSData(1) = WindDir
Alias WSData(2) = WS_ms
Alias WSData(3) = WSDiag
Alias N(1) = SmplsF
Alias N(2) = Diag1F
Alias N(3) = Diag2F
Alias N(4) = Diag4F
Alias N(5) = Diag8F
Alias N(6) = Diag9F
Alias N(7) = Diag10F
Alias N(8) = NNDF

Units BattV=Volts
Units PTemp_C=Deg C
Units AirTC=Deg C
Units RH=%
Units PVap=kPa
Units SlrW=W/m²
Units SlrMJ=MJ/m²
Units Rain_mm=mm
Units BP_mbar=mbar
Units VWC=m³/m³
Units EC=dS/m
Units GrTemp=Deg C
Units P=unitless
Units PA=nSec
Units VR=unitless
Units WindDir=degrees
Units WS_ms=meters/second
Units WSDiag=unitless

'Define Data Tables
DataTable(SendHourly, True, -1)
  DataInterval(0, MinutesPerHour, min, 10)
  TableFile ("USR:SendHourly", TableFormatOption, TableMaxFiles, TimeToWriteTable, MinutesPerDay, min, 0, TableFileName(1))
  Average(1, AirTC, FP2, False)
  Sample(1, RH, FP2)
  Average(1, SlrW, FP2, False)
  Average(1, VWC, FP2, False)
  Average(1, GrTemp, FP2, False)
  Average(1, WS_ms, FP2, False)
  Maximum(1, WS_ms, FP2, False, False)
  FieldNames("WS_ms_max")
  Average(1, WindDir, FP2, False)
  Totalize(1, Rain_mm, FP2, False)
  Average(1, BP_mbar, FP2, False)
EndTable

DataTable(SendDaily, True, -1)
  DataInterval(0, MinutesPerDay, min, 10)
  TableFile ("USR:SendDaily", TableFormatOption, TableMaxFiles, TimeToWriteTable, MinutesPerDay, min, 0, TableFileName(2))
  Minimum(1, BattV, FP2, False, False)
  Sample(1, Status.LithiumBattery, FP2)
  Sample(1, WSDiag, FP2)
EndTable

DataTable(SaveFull, True, -1)
  DataInterval(0, 30, min, 10)
  CardOut(0, MaxNumberOfRecords)
  Average(1, BattV, FP2, False)
  Average(1, PTemp_C, FP2, False)
  Average(1, AirTC, FP2, False)
  Sample(1, RH, FP2)
  Average(1, PVap, FP2, False)
  Average(1, SlrW, FP2, False)
  Totalize(1, SlrMJ, IEEE4, False)
  Average(1, VWC, FP2, False)
  Average(1, GrTemp, FP2, False)
  Average(1, EC, FP2, False)
  Average(1, P, FP2, False)
  Average(1, PA, FP2, False)
  Average(1, VR, FP2, False)
  Average(1, WS_ms, FP2, False)
  Maximum(1, WS_ms, FP2, False, False)
  FieldNames("WS_ms_max")
  Minimum(1, WS_ms, FP2, False, False)
  FieldNames("WS_ms_min"
  Average(1, WindDir, FP2, False)
  WindVector(1, WS_ms, WindDir, FP2, False, 0, 0, 1)
  FieldNames("WS_ms_S_WVT,WindDir_D1_WVT")
  Totalize(1, Rain_mm, FP2, False)
  Average(1, BP_mbar, FP2, False)
EndTable

DataTable(RainHiRes, True, -1)
  DataInterval(0, 5, min, 10)
  DataEvent(1, TsinceRain < 6, TsinceRain > 30, 0)
  CardOut(0, MaxNumberOfRecords)
  Totalize(1, Rain_mm, FP2, False)
  Sample(1, VWC, FP2
  Sample(1, GrTemp, FP2)
EndTable

Sub IridiumTx
  Dim StringBuffer As String * 64
  Dim CSB1, CSB2, TX_Checksum As Long

  'Calculate checksum:
  TX_Checksum = CheckSum(TxMeasureData, 23, TxDataLength)
  CSB1 = TX_Checksum AND &B11111111
  CSB2 = (TX_Checksum >> 8)  AND &B11111111

  'String contatenation: Datalogger_cr1000.pdf, page: 282
  'And append it to the data that is going to be send:
  TxMeasureData(1, 1, TxDataLength + 1) = CHR(CSB2) 'Send second byte first!
  TxMeasureData(1, 1, TxDataLength + 2) = CHR(CSB1)

  'Initialize:
  SerialOpen(ComRS232, 19200, 0, 0, 2000)
  SerialOut(ComRS232, "AT+CIER=1,0,1" + CHR(13), "", 1, 10)
  SerialIn(SerialResponse1, ComRS232, 6000, 13, 64)

  'Prepare send:
  StringBuffer = "AT+SBDWB=" + TxDataLength + CHR(13)
  SerialOut(ComRS232, StringBuffer, "", 1, 10)
  SerialIn(SerialResponse2, ComRS232, 6000, 13, 64)

  'If there already was an error, don't try to send binary data
  If NumOfTxErrors = 0 Then
    'Send data including checksum:
    SerialOutBlock(ComRS232, TxMeasureData, TxDataLength + 2)

    'SerialResponse3 should be 0 if everything went well.
    'Otherwise see error codes in the manual:
    'IRDM_ISU_ATCommandReference.pdf, page 95 / 110
    '0: OK
    '1: Timeout
    '2: Checksum error
    '3: Message size not correct
    SerialIn(SerialResponse3, ComRS232, 6000, 13, 64)

    'Convert String respone to Integer
    'SplitStr(result array, input string, filter = "", max number of values = 6, option = 0)
    'ErrorCode: result array
    'SerialResponse3: input string
    '"": filter (not used in this case)
    '6: max number of values
    '0: split option, here 0 means numeric
    SplitStr(ErrorCode, SerialResponse3, "", 6, 0)

    If ErrorCode(1) <> 0 Then
      'An error occured.
      'Try to send the error code to the user as ASCII Text
      SerialOut(ComRS232,"AT+SBDWT=ErrorCode: " + ErrorCode(1) + " in SerialOutBlock" + CHR(13), "0", 1, 500)
      'Increase number of Errors, so that we know that this data frame was not sent correctly
      NumOfTxErrors = NumOfTxErrors + 1
    EndIf
  EndIf

  SerialOut(ComRS232, "AT+SBDI" + CHR(13), "",  1, 10)
  SerialIn(SerialResponse4, ComRS232, 6000, 13, 64)

  'Clear modem buffer
  SerialOut(ComRS232, "AT+SBDD0" + CHR(13), "", 1, 10)
  SerialIn(SerialResponse5, ComRS232, 6000, 13, 64)

  SerialClose(ComRS232)
EndSub

Sub IridiumSendText(Message As String)
  'Initialize:
  SerialOpen(ComRS232, 19200, 0, 0, 2000)
  SerialOut(ComRS232, "AT+CIER=1,0,1" + CHR(13), "", 1, 10)

  'Send message to modem:
  SerialOut(ComRS232,"AT+SBDWT=" + Message + CHR(13), "0", 1, 500)

  'Send message to satelite:
  SerialOut(ComRS232, "AT+SBDI" + CHR(13), "",  1, 10)
  SerialOut(ComRS232, "AT+SBDD0" + CHR(13), "", 1, 10)

  SerialClose(ComRS232)
EndSub

'Main Program
BeginProg
  'A USR Drive is required for the COM9602 subroutine to store some temporary files.
  SetStatus ("USRDriveSize", 32768)

  'Initialize storage for failed transmissions
  For i = 1 To MaxNumberOfFailures Step 1
    SavedLength(i) = 0
  Next i

  'Main Scan
  Scan(1, min, 1, 0)

    'Default Datalogger Battery Voltage measurement 'BattV'
    Battery(BattV)
    'Default Wiring Panel Temperature measurement 'PTemp_C'
    PanelTemp(PTemp_C,_50Hz)

    'HC2S3 (panel switched power) Temperature & Relative Humidity Sensor measurements 'AirTC' and 'RH'
    PortSet (9, 1)
    VoltSe(AirTC, 1, mV2500, 1, 0, 0, _50Hz, 0.1, -40)
    VoltSe(RH, 1, mV2500, 2, 0, 0, _50Hz, 0.1, 0)
    'Trim RH value
    If RH > 100 AND RH < 103 Then RH = 100
    VaporPressure(PVap, AirTC, RH)

    'CS300 Pyranometer measurements 'SlrMJ' and 'SlrW'
    VoltSe(SlrW, 1, mV2500, 3, 1, 0, _50Hz, 1.0, 0)
    If SlrW < 0 Then SlrW = 0
    SlrMJ = SlrW * (0.000005 * 60)  'Convert mV to MJ/m² with 60s measurement interval
    SlrW = SlrW * 5.0  'Convert mV to W/m²

    'WindSonic4 Two Dimensional Sonic Wind Speed & Direction Sensor measurements 'WindDir', 'WS_ms', and 'WSDiag'
    'WindSonic4 has a fixed frequency set to 1 Hz. See WindSensor_windsonic.pdf, page 10 / 18
    'Get data from WindSonic4
    SDI12Recorder(WindDir, 3, "0", "R0!", 1, 0)
    If WindDir = NaN Then
      Move(WS_ms, 2, WindDir, 1)
    EndIf
    'Set diagnostic variables as needed
    Move(SmplsF, 8, 0, 1)

    'ARG100 Tipping Bucket Rain Gauge measurement 'Rain_mm'
    PulseCount(Rain_mm, 1, 1, 2, 0, 0.2, 0)
    If (Rain_mm > 0.19) Then
      TsinceRain = 0
    Else
      TsinceRain = TsinceRain + 1
    EndIf

    'CS100 Barometric Pressure Sensor measurement 'BP_mbar'
    PortSet(2, 1)
    VoltSe(BP_mbar, 1, mV2500, 4, 1, 0, _50Hz, 0.2, 600)
    BP_mbar = BP_mbar * 1

    'Call Data Tables and Store Data
    CallTable SendHourly
    CallTable SendDaily
    CallTable SaveFull
    CallTable RainHiRes

    If TimeIntoInterval (TimeModemOn, MinutesPerDay, Min) Then
      PortSet (5, 1)
    EndIf

    If TimeIntoInterval (TimeModemOff, MinutesPerDay, Min) Then
      PortSet (5, 0)
      SendFiles = False
    EndIf

    'Allow the modem 3 minutes for warm up before sending files.
    If TimeIntoInterval (TimeModemOn + 3, MinutesPerDay, Min) Then
      SendFiles = True
    EndIf

    If SendFiles Then
      'Are there some leftovers of the previous day ?
      'If yes try to send it now if the battery has enough power
      For i = 1 To MaxNumberOfFailures Step 1
        If SavedLength(i) > 0 AND BattV >= 11.5 Then
          TxMeasureData = SavedData(i)
          TxDataLength = SavedLength(i)

          Call IridiumSendText("Try to resend msg no.: " + i)
          NumOfTxErrors = 0

          Call IridiumTx()

          If NumOfTxErrors = 0 Then
            'Transmission successfully, clear saved data
            SavedLength(i) = 0
          EndIf
        EndIf
      Next i

      For tableIndex = 1 To NumberDataTables Step 1
        FileHandle = FileOpen(TableFileName(tableIndex), "rb", 0)

        'One frame is ReadMax - 2 bytes long.
        TxDataLength = FileRead(FileHandle, TxMeasureData, ReadMax - 2)
        Do While TxDataLength > 0
          NumOfTxErrors = 0

          Call IridiumTx()

          If NumOfTxErrors > 0 Then
            Call IridiumSendText("Number of tx errors: " + NumOfTxErrors)

            'Save the data to be send later (next day)
            For i = 1 To MaxNumberOfFailures Step 1
              'Search for an empty (unused) slot
              If SavedLength(i) = 0 Then
                SavedData(i) = TxMeasureData
                SavedLength(i) = TxDataLength
                ExitFor
              EndIf
            Next
          EndIf
          TxDataLength = FileRead(FileHandle, TxMeasureData, ReadMax - 2)
        Loop

        FileClose(FileHandle)
      Next tableIndex

      SendFiles = False
      PortSet (5, 0)
    EndIf

  NextScan

  SlowSequence
  'Ground Measurements every 15 or 30 Minutes
  Scan(15, min, 0, 0)
    'Conunter to do CS655 measurement only every 30 Minutes unless RainHiRes is saved, then every 15 Min
    If (TsinceRain <= 30) Then
      CS655cntr = 0
    Else
      CS655cntr = CS655cntr - 1
    EndIf

    If (CS655cntr < 1) Then
      'CS655 Water Content Reflectometer measurements 'VWC', 'EC', and 'Temp'
      SDI12Recorder(CS655(), 1, "0", "M3!", 1, 0)
      'Resest Counter
      CS655cntr = 2
    EndIf

  NextScan
  EndSequence

EndProg
